name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: eu-south-2                  
  ECR_REPOSITORY_BACKEND: ecommerce-backend
  ECR_REPOSITORY_FRONTEND: ecommerce-frontend
  ECR_REPOSITORY_NGINX: ecommerce-nginx
  ECS_SERVICE: my-ecs-service
  ECS_CLUSTER: my-ecs-cluster
  ECS_TASK_DEFINITION: .aws/task-definition.json
  CONTAINER_NAME_BACKEND: ecommerce-backend
  CONTAINER_NAME_FRONTEND: ecommerce-frontend
  CONTAINER_NAME_NGINX: ecommerce-nginx

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push Backend image to Amazon ECR
      id: build-backend-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY_BACKEND }}:${{ github.sha }} -f BackendProd.Dockerfile .
        docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY_BACKEND }}:${{ github.sha }}
        echo "backend_image=$ECR_REGISTRY/${{ env.ECR_REPOSITORY_BACKEND }}:${{ github.sha }}" >> $GITHUB_ENV

    - name: Build, tag, and push Frontend image to Amazon ECR
      id: build-frontend-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY_FRONTEND }}:${{ github.sha }} -f FrontendProd.Dockerfile .
        docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY_FRONTEND }}:${{ github.sha }}
        echo "frontend_image=$ECR_REGISTRY/${{ env.ECR_REPOSITORY_FRONTEND }}:${{ github.sha }}" >> $GITHUB_ENV

    - name: Build, tag, and push Nginx image to Amazon ECR
      id: build-nginx-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY_NGINX }}:${{ github.sha }} -f Nginx.Dockerfile .
        docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY_NGINX }}:${{ github.sha }}
        echo "nginx_image=$ECR_REGISTRY/${{ env.ECR_REPOSITORY_NGINX }}:${{ github.sha }}" >> $GITHUB_ENV

    - name: Fill in the new image IDs in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME_BACKEND }}
        image: ${{ env.backend_image }}
    - uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        container-name: ${{ env.CONTAINER_NAME_FRONTEND }}
        image: ${{ env.frontend_image }}
    - uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        container-name: ${{ env.CONTAINER_NAME_NGINX }}
        image: ${{ env.nginx_image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
